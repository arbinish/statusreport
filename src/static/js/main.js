// Generated by CoffeeScript 1.6.3
(function() {
  var AppBaseView, AppRouter, Entries, EntriesView, Entry, EntryView, HistoryView, NewEntryView, ReportView, SearchView, Week, Weeks, entryDateFmt, getMonth, getTodaysDate, month_map, _ref, _ref1, _ref10, _ref11, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  month_map = {
    0: "Jan",
    1: "Feb",
    2: "Mar",
    3: "Apr",
    4: "May",
    5: "Jun",
    6: "Jul",
    7: "Aug",
    8: "Sept",
    9: "Oct",
    10: "Nov",
    11: "Dec"
  };

  entryDateFmt = function(d) {
    var _d;
    _d = new Date(d);
    return "" + month_map[_d.getMonth()] + " - " + (_d.getDate());
  };

  getMonth = function(m) {
    var k, v;
    for (k in month_map) {
      v = month_map[k];
      if (m === v) {
        return +k + 1;
      }
    }
    return void 0;
  };

  getTodaysDate = function() {
    var d;
    d = new Date();
    d.setHours(0);
    d.setMinutes(0);
    d.setSeconds(0);
    d.setMilliseconds(0);
    return d.getTime();
  };

  window.getMonth = getMonth;

  window.entryDateFmt = entryDateFmt;

  window.month_map = month_map;

  Entry = (function(_super) {
    __extends(Entry, _super);

    function Entry() {
      _ref = Entry.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Entry.prototype.defaults = {
      week_id: '',
      date: getTodaysDate(),
      text: 'New worklog',
      tags: 'progress'
    };

    Entry.prototype.urlRoot = '/entry';

    Entry.prototype.update = function() {
      var attrs;
      attrs = this.changedAttributes();
      console.log('attrs', attrs, "text in?", "text" in attrs);
      if (attrs) {
        return console.log('something changed for', this.toJSON());
      }
    };

    return Entry;

  })(Backbone.Model);

  Entries = (function(_super) {
    __extends(Entries, _super);

    function Entries() {
      _ref1 = Entries.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Entries.prototype.url = '/entries';

    Entries.prototype.model = Entry;

    Entries.prototype.getHistory = function() {
      var _this = this;
      this.history = {};
      return _.each(this.models, function(model) {
        var week_id, year;
        year = (new Date(model.get('date'))).getFullYear();
        if (_this.history[year] == null) {
          _this.history[year] = [];
        }
        week_id = model.get('week_id');
        return _this.history[year].push(model.attributes);
      });
    };

    return Entries;

  })(Backbone.Collection);

  window.App = {};

  window.App.Entry = Entry;

  window.App.Entries = Entries;

  Week = (function(_super) {
    __extends(Week, _super);

    function Week() {
      _ref2 = Week.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Week.prototype.urlRoot = '/week';

    return Week;

  })(Backbone.Model);

  Weeks = (function(_super) {
    __extends(Weeks, _super);

    function Weeks() {
      _ref3 = Weeks.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Weeks.prototype.url = '/weeks';

    Weeks.prototype.model = Week;

    Weeks.prototype.thisWeek = function() {
      var d, _model;
      d = (new Date).getTime();
      _model = this.models.filter(function(week) {
        return (week.get('start') <= d && d <= week.get('end'));
      });
      return _model.pop();
    };

    return Weeks;

  })(Backbone.Collection);

  window.App || (window.App = {});

  window.App.Weeks = Weeks;

  SearchView = (function(_super) {
    __extends(SearchView, _super);

    function SearchView() {
      _ref4 = SearchView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    SearchView.prototype.className = "input-group";

    SearchView.prototype.template = _.template("<input type=\"text\" id=\"search\" class=\"form-control\">\n<div class=\"input-group-btn\"><button class=\"btn btn-default\">Search</button></div>");

    SearchView.prototype.initialize = function() {
      this.render();
      return this;
    };

    SearchView.prototype.render = function() {
      this.$el.append(this.template());
      return this;
    };

    return SearchView;

  })(Backbone.View);

  EntryView = (function(_super) {
    __extends(EntryView, _super);

    function EntryView() {
      this.addTag = __bind(this.addTag, this);
      this.removeTag = __bind(this.removeTag, this);
      this.clearEntry = __bind(this.clearEntry, this);
      this.updateInfo = __bind(this.updateInfo, this);
      this.updateDate = __bind(this.updateDate, this);
      this.render = __bind(this.render, this);
      this.saveModel = __bind(this.saveModel, this);
      this.removeView = __bind(this.removeView, this);
      _ref5 = EntryView.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    EntryView.prototype.tagName = 'dl';

    EntryView.prototype.id = function() {
      return "m-" + this.model.id;
    };

    EntryView.prototype.template = _.template("<span class=\"delete-model pull-right\">&#x2702;</span>\n<dt contenteditable><%= fmtDate  %></dt>\n    <dd contenteditable class=\"text\"><%= text %></dd>\n    <% if (tags) { %>\n        <span class=\"delete-tag\" data-toggle=\"tooltip\" title=\"Remove Tag\">&nbsp;&#x2717;&nbsp;</span>\n        <dd contenteditable class=\"badge tag\" title=\"Edit Tag\"\n                data-placement=\"right\" data-toggle=\"tooltip\"><%= tags %></dd>\n    <% } else {%>\n        <span class=\"badge alert-success\" title=\"Add Tag\" data-placement=\"right\"\n            data-toggle=\"tooltip\">&#x271b;</span><%} %>");

    EntryView.prototype.initialize = function() {
      this.listenTo(this.model, 'change', this.render);
      this.listenTo(this.model, 'destroy', this.removeView);
      return this;
    };

    EntryView.prototype.removeView = function() {
      this.remove();
      this.model.unbind();
      return this;
    };

    EntryView.prototype.saveModel = function() {
      if (this.model.hasChanged()) {
        this.model.save({
          silent: true
        });
        console.log("+++ model saved!!");
      }
      this.render();
      return this;
    };

    EntryView.prototype.render = function(m, o) {
      var fields;
      fields = this.model.toJSON();
      if (!fields) {
        console.log('fields empty for this view');
      }
      fields.fmtDate = entryDateFmt(this.model.get('date'));
      this.$el.html(this.template(fields));
      this.$("[data-toggle=tooltip]").tooltip();
      return this;
    };

    EntryView.prototype.events = {
      "click span.badge": "addTag",
      "click .delete-tag": "removeTag",
      "click .delete-model": "clearEntry",
      "focusout dd": "updateInfo",
      "focusout dt": "updateDate"
    };

    EntryView.prototype.updateDate = function(e) {
      var _d, _ref6, _text;
      _text = (_ref6 = $(e.target).text()) != null ? _ref6.trim() : void 0;
      _text = _text.split(' - ');
      _d = new Date;
      _d.setMonth(+getMonth(_text[0]) - 1);
      _d.setDate(+_text[1]);
      if (isNaN(_d)) {
        this.render();
        return this;
      }
      _d.setHours(0);
      _d.setMinutes(0);
      _d.setSeconds(0);
      _d.setMilliseconds(0);
      if (this.model.get('date') !== _d.getTime()) {
        this.model.set('date', _d.getTime());
        this.model.save();
      }
      return false;
    };

    EntryView.prototype.updateInfo = function(e) {
      var _ref6, _ref7, _ref8;
      if ($(e.target).hasClass('text')) {
        if (!((_ref6 = $(e.target).text()) != null ? _ref6.trim() : void 0)) {
          if (confirm("Are you sure you want to purge this log?")) {
            this.$el.off("blur", "dd", function() {});
            this.model.destroy();
            return false;
          }
        } else {
          this.model.set('text', _.escape((_ref7 = $(e.target).text()) != null ? _ref7.trim() : void 0));
        }
      } else {
        this.model.set('tags', _.escape((_ref8 = $(e.target).text()) != null ? _ref8.trim() : void 0));
      }
      if (this.model.hasChanged()) {
        this.model.save();
      }
      return false;
    };

    EntryView.prototype.clearEntry = function(e) {
      return this.model.destroy();
    };

    EntryView.prototype.removeTag = function(e) {
      this.model.set('tags', '');
      this.model.save();
      return this;
    };

    EntryView.prototype.addTag = function(e) {
      var _tag;
      _tag = prompt("Enter a tag");
      if (_tag != null) {
        this.model.set('tags', _tag.trim());
        this.model.save();
      }
      return this;
    };

    EntryView.prototype.editEntry = function() {
      return this;
    };

    return EntryView;

  })(Backbone.View);

  NewEntryView = (function(_super) {
    __extends(NewEntryView, _super);

    function NewEntryView() {
      this.updateInfo = __bind(this.updateInfo, this);
      this.updateDate = __bind(this.updateDate, this);
      this.addTag = __bind(this.addTag, this);
      this.removeTag = __bind(this.removeTag, this);
      _ref6 = NewEntryView.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    NewEntryView.prototype.tagName = 'dl';

    NewEntryView.prototype.id = 'new';

    NewEntryView.prototype.template = _.template("<span class=\"save-model pull-right\" data-toggle=\"tooltip\"\n    title=\"Save entry\" data-placement=\"right\">&#x2714;</span>\n<dt contenteditable><%= fmtDate  %></dt>\n    <dd contenteditable class=\"text\"><%= text %></dd>\n    <% if (tags) { %>\n        <span class=\"delete-tag\" data-toggle=\"tooltip\" title=\"Remove Tag\">&nbsp;&#x2717;&nbsp;</span>\n        <dd contenteditable class=\"badge tag\" title=\"Edit Tag\"\n                data-placement=\"right\" data-toggle=\"tooltip\"><%= tags %></dd>\n    <% } else {%>\n        <span class=\"badge alert-success\" title=\"Add Tag\" data-placement=\"right\"\n            data-toggle=\"tooltip\">&#x271b;</span><%} %>");

    NewEntryView.prototype.initialize = function() {
      this.model = new Entry;
      this.listenTo(this.model, 'change', this.render);
      this.listenTo(this.model, 'destroy', this.close);
      return this;
    };

    NewEntryView.prototype.onClose = function() {
      return this.model.unbind();
    };

    NewEntryView.prototype.render = function() {
      var fields;
      fields = this.model.toJSON();
      fields.fmtDate = entryDateFmt(this.model.get('date'));
      this.$el.html(this.template(fields));
      this.$("[data-toggle=tooltip]").tooltip();
      return this;
    };

    NewEntryView.prototype.events = {
      "click .save-model": "saveModel",
      "click .delete-tag": "removeTag",
      "click span.badge": "addTag",
      "focusout dd": "updateInfo",
      "focusout dt": "updateDate"
    };

    NewEntryView.prototype.removeTag = function(e) {
      this.model.set('tags', '');
      return this;
    };

    NewEntryView.prototype.addTag = function(e) {
      var _tag;
      _tag = prompt("Enter a tag");
      if (_tag != null) {
        this.model.set('tags', _tag.trim());
      }
      return this;
    };

    NewEntryView.prototype.updateDate = function(e) {
      var _d, _ref7, _text;
      _text = (_ref7 = $(e.target).text()) != null ? _ref7.trim() : void 0;
      _text = _text.split(' - ');
      _d = new Date;
      _d.setMonth(+getMonth(_text[0]) - 1);
      _d.setDate(+_text[1]);
      if (isNaN(_d)) {
        this.render();
        return this;
      }
      _d.setHours(0);
      _d.setMinutes(0);
      _d.setSeconds(0);
      _d.setMilliseconds(0);
      if (this.model.get('date') !== _d.getTime()) {
        this.model.set('date', _d.getTime());
      }
      return false;
    };

    NewEntryView.prototype.updateInfo = function(e) {
      var _ref7, _ref8, _ref9;
      if ($(e.target).hasClass('text')) {
        if (!((_ref7 = $(e.target).text()) != null ? _ref7.trim() : void 0)) {
          if (confirm("Are you sure you want to purge this log?")) {
            this.$el.off("blur", "dd", function() {});
            this.model.destroy();
            return false;
          }
        } else {
          this.model.set('text', _.escape((_ref8 = $(e.target).text()) != null ? _ref8.trim() : void 0));
        }
      } else {
        this.model.set('tags', _.escape((_ref9 = $(e.target).text()) != null ? _ref9.trim() : void 0));
      }
      return false;
    };

    NewEntryView.prototype.saveModel = function() {
      var _ref7, _ref8,
        _this = this;
      this.model.save({
        text: (_ref7 = this.$('dd.text').text()) != null ? _ref7.trim() : void 0,
        tags: (_ref8 = this.$('dd.tag').text()) != null ? _ref8.trim() : void 0
      }, {
        success: function() {
          window.App.entries.add(_this.model);
          App.app_router.navigate('', {
            trigger: true
          });
          return false;
        },
        error: function() {
          return false;
        }
      });
      return this;
    };

    return NewEntryView;

  })(Backbone.View);

  window.App.EntryView = EntryView;

  EntriesView = (function(_super) {
    __extends(EntriesView, _super);

    function EntriesView() {
      _ref7 = EntriesView.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    EntriesView.prototype.initialize = function() {
      return this.listenTo(this.collection, 'reset', this.addAll);
    };

    EntriesView.prototype.addOne = function(m) {
      var view;
      view = new EntryView({
        model: m
      });
      this.$el.prepend(view.render().el);
      return this;
    };

    EntriesView.prototype.addAll = function() {
      this.$el.remove();
      this.collection.each(this.addOne, this);
      return this;
    };

    EntriesView.prototype.onClose = function() {
      return this.collection.models.forEach(function(model) {
        return model.unbind();
      });
    };

    EntriesView.prototype.render = function() {
      var _this = this;
      this.collection.each(function(model) {
        return _this.addOne(model);
      });
      return this;
    };

    return EntriesView;

  })(Backbone.View);

  window.App.EntriesView = EntriesView;

  ReportView = (function(_super) {
    __extends(ReportView, _super);

    function ReportView() {
      _ref8 = ReportView.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    ReportView.prototype.progressTemplate = _.template("<div class=\"entry\">\n  <h4><%- title %></h4>\n  <% _.each(_.keys(progress), function(title) { %>\n     <div class=\"record\">\n        <h5><%- title %></h5>\n    <% _.each(progress[title], function(model) { %>\n        <span><%- model.get('text') %></span><br/>\n      <% }) %>\n    </div>\n  <% }) %>\n</div>");

    ReportView.prototype.titleTemplate = _.template("<h4 style=\"font-variant: small-caps;font-family: Raleway, 'Helvetica Neue', Helvetica, sans-serif\">\nStatus Report for the week <%- monday %> &#8213; <%- friday %></h4>\n<hr/>");

    ReportView.prototype.template = _.template("<div class=\"entry\">\n  <h4><%- title %></h4>\n  <% _.each(records, function(record) { %>\n    <div class=\"record\">\n      <span><%- record.get('text') %></span>\n    </div>\n  <% }) %>\n</div>");

    ReportView.prototype.className = "container";

    ReportView.prototype.initialize = function(options) {
      this.options = options;
      if (this.options.weekId) {
        this.weekId = this.options.weekId;
      }
      return console.log('weekid', this.options);
    };

    ReportView.prototype.render = function() {
      var currentReport, friday, models, monday, plan, progress, thisWeek, title, _today;
      if (this.weekId) {
        console.log('got weekid', +this.weekId);
        thisWeek = window.App.weeks.get(+this.weekId);
      } else {
        thisWeek = this.collection.thisWeek();
      }
      console.log('thisWeek', thisWeek);
      currentReport = window.App.entries.filter(function(model) {
        return model.get('week_id') === thisWeek.id;
      });
      progress = currentReport.filter(function(model) {
        return model.get('tags').indexOf('progress') !== -1;
      });
      plan = currentReport.filter(function(model) {
        return model.get('tags').indexOf('plan') !== -1;
      });
      currentReport = _.difference(currentReport, progress, plan);
      progress.forEach(function(model) {
        var i, _tags;
        _tags = _.difference((function() {
          var _i, _len, _ref9, _results;
          _ref9 = model.get('tags').split(',');
          _results = [];
          for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
            i = _ref9[_i];
            _results.push(i.trim());
          }
          return _results;
        })(), "progress");
        return model._tags = _tags.pop();
      });
      plan.forEach(function(model) {
        var i, _tags;
        _tags = _.difference((function() {
          var _i, _len, _ref9, _results;
          _ref9 = model.get('tags').split(',');
          _results = [];
          for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
            i = _ref9[_i];
            _results.push(i.trim());
          }
          return _results;
        })(), "plan");
        return model._tags = _tags.pop();
      });
      progress = _.groupBy(progress, function(model) {
        return model._tags;
      });
      plan = _.groupBy(plan, function(model) {
        return model._tags;
      });
      currentReport = _.groupBy(currentReport, function(model) {
        return model.get('tags');
      });
      window.progress = progress;
      window.plan = plan;
      _today = new Date().getDay();
      monday = new Date(thisWeek.get('start'));
      friday = new Date(thisWeek.get('end'));
      this.$el.html(this.titleTemplate({
        monday: monday.toDateString(),
        friday: friday.toDateString()
      }));
      if (_.keys(progress).length) {
        this.$el.append(this.progressTemplate({
          progress: progress,
          title: 'Progress'
        }));
      }
      if (_.keys(plan).length) {
        this.$el.append(this.progressTemplate({
          progress: plan,
          title: 'Plan'
        }));
      }
      for (title in currentReport) {
        models = currentReport[title];
        this.$el.append(this.template({
          title: title,
          records: models
        }));
      }
      return this;
    };

    return ReportView;

  })(Backbone.View);

  HistoryView = (function(_super) {
    __extends(HistoryView, _super);

    function HistoryView() {
      _ref9 = HistoryView.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    HistoryView.prototype.tagName = "ul";

    HistoryView.prototype.className = "history";

    HistoryView.prototype.template = _.template("<h4> Weeks </h4><hr/>\n<% _.each(years, function(year) {\n  weekGroup = _.groupBy(history[year], function(entries) {\n    return entries.week_id\n  });\n  weekIds = _.keys(weekGroup);\n  for (_id in weekIds) {\n    week_id = +weekIds[_id];\n    weekStart = weeks.models.filter(function(w) {\n      return w.id == week_id\n    });\n    weekStart = weekStart.pop();\n    weekStartDate = new Date(weekStart.get('start')).toDateString(); \n    reportUrl = '#report/' + year + '-' + weekStart.get('id');%>\n    <li><a href=\"<%- reportUrl %>\"><%- weekStartDate %></a>\n    <span class=\"badge\"><%- weekGroup[week_id].length %></span></li>\n<% }\n}) %>");

    HistoryView.prototype.render = function() {
      var history, weeks, years;
      window.App.entries.getHistory();
      history = App.entries.history;
      weeks = App.weeks;
      years = _.keys(history);
      this.$el.html(this.template({
        weeks: weeks,
        years: years,
        history: history
      }));
      return this;
    };

    return HistoryView;

  })(Backbone.View);

  window.App.HistoryView = HistoryView;

  AppBaseView = (function(_super) {
    __extends(AppBaseView, _super);

    function AppBaseView() {
      _ref10 = AppBaseView.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    AppBaseView.prototype.initialize = function() {
      this.searchView = new SearchView;
      this.entriesView = new EntriesView({
        collection: window.App.entries
      });
      return this;
    };

    AppBaseView.prototype.onClose = function() {
      return this.entriesView.onClose();
    };

    AppBaseView.prototype.render = function() {
      this.$el.html((new SearchView).el);
      this.$el.append((new EntriesView({
        collection: window.App.entries
      })).render().el);
      return this;
    };

    return AppBaseView;

  })(Backbone.View);

  AppRouter = (function(_super) {
    __extends(AppRouter, _super);

    function AppRouter() {
      this.report = __bind(this.report, this);
      this.history = __bind(this.history, this);
      this.addEntry = __bind(this.addEntry, this);
      _ref11 = AppRouter.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    AppRouter.prototype.initialize = function() {
      this.$el = $('#main');
      return this;
    };

    AppRouter.prototype.routes = {
      "": "index",
      "add": "addEntry",
      "report/:id": "reportHist",
      "report": "report",
      "history": "history"
    };

    AppRouter.prototype.index = function() {
      var fetch;
      fetch = false;
      if (!window.App.entries.length) {
        fetch = true;
      }
      this.changeView(new AppBaseView, [window.App.entries], fetch);
      return this;
    };

    AppRouter.prototype.addEntry = function() {
      this.changeView(new NewEntryView, [window.App.entries]);
      return this;
    };

    AppRouter.prototype.history = function() {
      var fetch;
      fetch = false;
      if (!window.App.entries.length || !window.App.weeks) {
        fetch = true;
      }
      this.changeView(new HistoryView, [window.App.entries, window.App.weeks], fetch);
      return this;
    };

    AppRouter.prototype.report = function() {
      var fetch;
      fetch = false;
      if (!window.App.weeks.length || !window.App.entries.length) {
        fetch = true;
      }
      return this.changeView(new ReportView({
        collection: window.App.weeks
      }), [window.App.weeks, window.App.entries], fetch);
    };

    AppRouter.prototype.reportHist = function(id) {
      var fetch, weekId, year, _ref12;
      _ref12 = id.split('-'), year = _ref12[0], weekId = _ref12[1];
      console.log('reportHist called. weekId', weekId);
      fetch = false;
      if (!window.App.weeks.length || !window.App.entries.length) {
        fetch = true;
      }
      return this.changeView(new ReportView({
        collection: window.App.weeks,
        weekId: +weekId
      }), [window.App.weeks, window.App.entries], fetch);
    };

    AppRouter.prototype.changeView = function(view, collections, fetch) {
      var collection, render, _i, _len,
        _this = this;
      if (fetch == null) {
        fetch = true;
      }
      render = _.after(collections.length, function() {
        return _this.$el.html(view.render().el);
      });
      if (!fetch) {
        this.$el.html(view.render().el);
        return this;
      }
      if (_.isEmpty(collections)) {
        render;
      } else {
        for (_i = 0, _len = collections.length; _i < _len; _i++) {
          collection = collections[_i];
          collection.fetch({
            success: render
          });
        }
      }
      return this;
    };

    return AppRouter;

  })(Backbone.Router);

  $(document).ready(function() {
    var app_router;
    app_router = new AppRouter;
    app_router.on("route", function(name, params) {
      var ele, root;
      root = $('ul.nav.navbar-nav');
      console.log('router name', name);
      ele = root.find('a[href=#]');
      if (name === "report" || name === "reportHist") {
        ele = root.find('a[href=#report]');
      }
      if (name === "addEntry") {
        ele = root.find('a[href=#add]');
      }
      if (name === "history") {
        ele = root.find('a[href=#history]');
      }
      root.find('li.active').removeClass('active');
      return ele.parent().addClass('active');
    });
    window.App.weeks = new Weeks;
    window.App.entries = new Entries;
    window.App.app_router = app_router;
    return Backbone.history.start();
  });

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
