// Generated by CoffeeScript 1.6.3
(function() {
  var AppRouter, AppView, DetailView, Movie, MovieView, Movies, MoviesView, appRouter, movies, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Movie = (function(_super) {
    __extends(Movie, _super);

    function Movie() {
      _ref = Movie.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Movie.prototype.defaults = {
      name: '',
      year: 2014,
      watched: 0
    };

    return Movie;

  })(Backbone.Model);

  Movies = (function(_super) {
    __extends(Movies, _super);

    function Movies() {
      _ref1 = Movies.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Movies.prototype.model = Movie;

    return Movies;

  })(Backbone.Collection);

  MovieView = (function(_super) {
    __extends(MovieView, _super);

    function MovieView() {
      this.updatedivName = __bind(this.updatedivName, this);
      _ref2 = MovieView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    MovieView.prototype.id = function() {
      return this.model.cid;
    };

    MovieView.prototype.initialize = function() {
      return this;
    };

    MovieView.prototype.render = function() {
      this.$el.html("<div contenteditable>" + (this.model.get('name')) + "</div>\n<a class=\"btn btn-primary\" href=\"\#/movie/" + this.model.cid + "\">view</a>");
      return this;
    };

    MovieView.prototype.events = {
      "change input": "updateName",
      "blur div": "updatedivName",
      "click div": "dummyClick"
    };

    MovieView.prototype.dummyClick = function(e) {
      return console.log('clicked on', e.target);
    };

    MovieView.prototype.updatedivName = function(e) {
      var z;
      z = $(e.target).text();
      console.log('updating name from', this.model.get('name'), 'to', z);
      this.model.set('name', z);
      return this;
    };

    MovieView.prototype.updateName = function(e) {
      console.log('name is', this.$el.find('input').val());
      this.model.set('name', this.$el.find('input').val());
      console.log('collection:', this.model.collection);
      return this;
    };

    return MovieView;

  })(Backbone.View);

  DetailView = (function(_super) {
    __extends(DetailView, _super);

    function DetailView() {
      this.updateStatus = __bind(this.updateStatus, this);
      this.render = __bind(this.render, this);
      _ref3 = DetailView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    DetailView.prototype.render = function() {
      var val, watched;
      watched = +this.model.get('watched');
      console.log('watched initialily is', watched);
      val = 'Not watched';
      if (watched) {
        val = 'Watched';
      }
      this.$el.empty();
      this.$el.html("<input type=\"text\" name=\"movie\" value=\"" + (this.model.get('name')) + "\"/>");
      this.$el.append("<span class=\"btn btn-success\" data-watched=\"" + (this.model.get('watched')) + "\">" + val + "</span>");
      return this;
    };

    DetailView.prototype.events = {
      'click span': 'updateStatus'
    };

    DetailView.prototype.updateStatus = function(e) {
      var $ele, val, watched;
      $ele = $(e.target);
      watched = +$ele.data('watched');
      val = $ele.text();
      console.log('attrib', watched, 'value is', val);
      watched = +(!watched);
      console.log('now watched is', watched);
      val = 'Not watched';
      if (watched) {
        val = 'Watched';
      }
      $ele.attr('data-watched', watched);
      $ele.data('watched', watched);
      $ele.text(val);
      this.model.set({
        watched: watched
      });
      return this;
    };

    return DetailView;

  })(Backbone.View);

  MoviesView = (function(_super) {
    __extends(MoviesView, _super);

    function MoviesView() {
      _ref4 = MoviesView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    MoviesView.prototype.id = 'movies';

    MoviesView.prototype.render = function() {
      var _this = this;
      this.$el.html("");
      this.collection.models.forEach(function(model) {
        var movie;
        movie = new MovieView({
          model: model
        });
        return _this.$el.append(movie.render().el);
      });
      return this;
    };

    return MoviesView;

  })(Backbone.View);

  movies = new Movies;

  movies.add([
    new Movie({
      name: 'Jupiter Ascending'
    }), new Movie({
      name: 'Hercules'
    }), new Movie({
      name: 'Lucy'
    })
  ]);

  AppView = (function(_super) {
    __extends(AppView, _super);

    function AppView() {
      _ref5 = AppView.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    AppView.prototype.initialize = function() {
      this.moviesView = new MoviesView({
        collection: this.collection
      });
      window.moviesView = this.moviesView;
      this.moviesView.render();
      return this.listenTo(this.collection, "all", this.logit);
    };

    AppView.prototype.logit = function() {
      return console.log('log event for appview', arguments);
    };

    AppView.prototype.render = function() {
      this.$el.html(this.moviesView.render().el);
      return this;
    };

    return AppView;

  })(Backbone.View);

  AppRouter = (function(_super) {
    __extends(AppRouter, _super);

    function AppRouter() {
      _ref6 = AppRouter.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    AppRouter.prototype.initialize = function() {
      console.log('initializing router: collection', movies);
      this.appView = new AppView({
        collection: movies,
        el: 'div#main'
      });
      return window.appView = this.appView;
    };

    AppRouter.prototype.routes = {
      "": "index",
      "movie/:id": "showdetailView"
    };

    AppRouter.prototype.index = function() {
      console.log('index');
      return this.appView.render();
    };

    AppRouter.prototype.showdetailView = function(id) {
      var model;
      console.log('clicked on', id);
      model = movies.models.filter(function(m) {
        return m.cid === id;
      });
      if (model.length === 0) {
        console.log("no such movie");
        return this;
      }
      model = model[0];
      if (this.detailView) {
        this.detailView.undelegateEvents();
      }
      this.detailView = new DetailView({
        model: model,
        el: 'div#main'
      });
      return this.detailView.render();
    };

    return AppRouter;

  })(Backbone.Router);

  window.Movie = Movie;

  window.Movies = Movies;

  window.MovieView = MovieView;

  window.MoviesView = MoviesView;

  window.movies = movies;

  appRouter = new AppRouter;

  Backbone.history.start();

}).call(this);
